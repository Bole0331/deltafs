/*
 * Copyright (c) 2015-2017 Carnegie Mellon University.
 *
 * All rights reserved.
 *
 * Use of this source code is governed by a BSD-style license that can be
 * found in the LICENSE file. See the AUTHORS file for names of contributors.
 */

#include "deltafs_plfsio_filter.h"
#include "deltafs_plfsio_format.h"

#include "deltafs_plfsio.h"

#include <assert.h>
#include <typeinfo>       // operator typeid
#include <algorithm>

namespace pdlfs {
namespace plfsio {

BloomBlock::BloomBlock(const DirOptions& options, size_t bytes_to_reserve)
    : bits_per_key_(options.bf_bits_per_key) {
  // Round down to reduce probing cost a little bit
  k_ = static_cast<uint32_t>(bits_per_key_ * 0.69);  // 0.69 =~ ln(2)
  if (k_ < 1) k_ = 1;
  if (k_ > 30) k_ = 30;
  // Reserve an extra byte for storing the k
  if (bytes_to_reserve != 0) {
    space_.reserve(bytes_to_reserve + 1);
  }
  finished_ = true;  // Pending further initialization
  bits_ = 0;
}

BloomBlock::~BloomBlock() {}

int BloomBlock::chunk_type() {
  return static_cast<int>(ChunkType::kSbfChunk);  // Standard bloom filter
}

void BloomBlock::Reset(uint32_t num_keys) {
  bits_ = static_cast<uint32_t>(num_keys * bits_per_key_);
  // For small n, we can see a very high false positive rate.
  // Fix it by enforcing a minimum bloom filter length.
  if (bits_ < 64) {
    bits_ = 64;
  }
  uint32_t bytes = (bits_ + 7) / 8;
  finished_ = false;
  space_.clear();
  space_.resize(bytes, 0);
  // Remember # of probes in filter
  space_.push_back(static_cast<char>(k_));
  // Finalize # bits
  bits_ = bytes * 8;
}

void BloomBlock::AddKey(const Slice& key) {
  assert(!finished_);  // Finish() has not been called
  // Use double-hashing to generate a sequence of hash values.
  uint32_t h = BloomHash(key);
  const uint32_t delta = (h >> 17) | (h << 15);  // Rotate right 17 bits
  for (size_t j = 0; j < k_; j++) {
    const uint32_t b = h % bits_;
    space_[b / 8] |= (1 << (b % 8));
    h += delta;
  }
}

Slice BloomBlock::Finish() {
  assert(!finished_);
  finished_ = true;
  return space_;
}

bool BloomKeyMayMatch(const Slice& key, const Slice& input) {
  const size_t len = input.size();
  if (len < 2) {
    return true;  // Consider it a match
  }
  const uint32_t bits = static_cast<uint32_t>((len - 1) * 8);

  const char* array = input.data();
  // Use the encoded k so that we can read filters generated by
  // bloom filters created using different parameters.
  const uint32_t k = static_cast<unsigned char>(array[len - 1]);
  if (k > 30) {
    // Reserved for potentially new encodings for short bloom filters.
    // Consider it a match.
    return true;
  }

  uint32_t h = BloomHash(key);
  const uint32_t delta = (h >> 17) | (h << 15);  // Rotate right 17 bits
  for (size_t j = 0; j < k; j++) {
    const uint32_t b = h % bits;
    if ((array[b / 8] & (1 << (b % 8))) == 0) {
      return false;
    }
    h += delta;
  }

  return true;
}

// Encoding a bitmap as-is, uncompressed. Used for debugging only.
// Not intended for production.
class UncompressedFormat {
 public:
  UncompressedFormat(const DirOptions& options, std::string* space)
      : key_bits_(options.bm_key_bits), space_(space) {
    bits_ = 1u << key_bits_;  // Logic domain space (total # unique keys)
  }

  void Reset(uint32_t num_keys) {
    space_->clear();
    const size_t bytes = (bits_ + 7) / 8;  // Bitmap size (uncompressed)
    space_->resize(bytes, 0);
  }

  // Set the i-th bit to "1". If the i-th bit is already set,
  // no action needs to be taken.
  void Set(uint32_t i) {
    assert(i < bits_);  // Must not flow out of the key space
    (*space_)[i / 8] |= 1 << (i % 8);
  }

  // Finalize the bitmap representation.
  // Return the final buffer size.
  size_t Finish() { return space_->size(); }

  // Return true iff the i-th bit is set in the given bitmap.
  static bool Test(uint32_t i, size_t key_bits, const Slice& input) {
    const size_t bits = input.size() * 8;
    if (i < bits) {
      return 0 != (input[i / 8] & (1 << (i % 8)));
    } else {
      return false;
    }
  }

 private:
  // Key size in bits
  const size_t key_bits_;
  // Underlying space for the bitmap
  std::string* const space_;
  // Total bits in the bitmap
  size_t bits_;
};

// Encoding a bitmap using a modified varint scheme.
class CompressedFormat {
 public:
  CompressedFormat(const DirOptions& options, std::string* space)
      : key_bits_(options.bm_key_bits), space_(space) {
    bits_ = 1u << key_bits_;  // Logic domain space (total # unique keys)
    bucket_num_ = 1u << (key_bits_-8);
  }

  // Reset filter state and resize buffer space.
  // Use num_keys to estimate bitmap density.
  void Reset(uint32_t num_keys) {
    space_->clear();
    working_space_.clear();
    overflowed.clear();
    // Calculate bucket size in probability
    // Extra byte to store the number of key in the bucket
    bucket_size_ = (num_keys+bucket_num_-1)/bucket_num_ + 1;
    working_space_.resize(bucket_size_ * bucket_num_, 0);
    // Calculate the approximate final result size
    size_t approx_size = (num_keys*10 + 7)/8; // Assume 10 bits/key
    space_->reserve(approx_size);
  }

  // Set the i-th bit to "1". If the i-th bit is already set,
  // no action needs to be taken.
  void Set(uint32_t i) {
    int bucket_index = i >> 8;
    // Read bucket key number
    unsigned char key_index = working_space_[bucket_index*bucket_size_];
    if(key_index < bucket_size_-1) {
      // Append to the bucket
      working_space_[bucket_index*bucket_size_+key_index+1] = i & ((1 << 8)-1);
    } else {
      // Append to overflow vector
      overflowed.push_back(i);
    }
    // Update the bucket key number
    working_space_[bucket_index*bucket_size_] = key_index+1;
  }

  const size_t MemUsage() {
    return space_->capacity() + working_space_.capacity() + overflowed.size() * sizeof(size_t);
  }

  // Finalize the bitmap representation.
  // Return the final buffer size.
  size_t Finish();

  // Return true iff the i-th bit is set in the given bitmap.
  static bool Test(uint32_t bit, size_t key_bits, const Slice& input);

 protected:
  // Key size in bits
  const size_t key_bits_;  // Domain space
  // Underlying space for the bitmap
  std::string* const space_;
  // Logic bits in the bitmap.
  // The actual memory used may differ due to compression.
  size_t bits_;

  // Space for working space.
  std::string working_space_;

  // Variable specified for construction.
  size_t bucket_num_;
  size_t bucket_size_;
  std::vector<size_t> overflowed;
};

class VarintFormat: public CompressedFormat {
 public:
  VarintFormat(const DirOptions& options, std::string* space)
      :CompressedFormat(options, space) {}

  size_t Finish() {
    std::sort(overflowed.begin(), overflowed.end());
    size_t overflowed_idx = 0;
    size_t last_one = 0;
    std::vector<size_t> bucket_keys;
    // For every bucket
    for(size_t i = 0; i < bucket_num_; i++) {
      // Bucket key size
      unsigned char key_num = static_cast<unsigned char>(working_space_[bucket_size_*i]);
      size_t offset = bucket_size_*i + 1;
      // Clear vector for repeated use.
      bucket_keys.clear();
      for(int j = 0; j< key_num; j++) {
        if(j < bucket_size_-1)
          bucket_keys.push_back(static_cast<unsigned char>(working_space_[offset+j]) + (i<<8));
        else
          bucket_keys.push_back(overflowed[overflowed_idx++]);
      }
      std::sort(bucket_keys.begin(), bucket_keys.end());
      for(std::vector<size_t>::iterator it = bucket_keys.begin(); it != bucket_keys.end(); ++it) {
        size_t distance = *it-last_one;
        last_one = *it;
        // Encoding the distance to variable length encode.
        unsigned char b = static_cast<unsigned char>(distance % 128);
        while (distance / 128 > 0) {
          // Set continue bit
          b |= 1 << 7;
          space_->push_back(b);
          distance /= 128;
          b = static_cast<unsigned char>(distance % 128);
        }
        space_->push_back(b);
      }
    }
    return space_->size();
  }

  static bool Test(uint32_t bit, size_t key_bits, const Slice& input) {
    size_t index = 0;
    for(size_t i = 0; i < input.size(); i++) {
      size_t runLen = 0;
      size_t bytes = 0;
      while((input[i] & (1<<7)) !=0) {
        runLen += static_cast<size_t>(input[i] & ((1<<7)-1)) << (bytes*7);
        i++;
        bytes++;
      }
      runLen += static_cast<size_t>(input[i]) << (bytes*7);
      if(index + runLen == bit)
        return true;
      else if (index + runLen > bit)
        return false;
      else
        index += runLen;
    }
    return false;
  }

};

class VarintPlusFormat: public CompressedFormat {
 public:
  VarintPlusFormat(const DirOptions& options, std::string* space)
      :CompressedFormat(options, space) {}

  size_t Finish() {
    std::sort(overflowed.begin(), overflowed.end());
    size_t overflowed_idx = 0;
    size_t last_one = 0;
    std::vector<size_t> bucket_keys;
    // For every bucket
    for(size_t i = 0; i < bucket_num_; i++) {
      // Bucket key size
      unsigned char key_num = static_cast<unsigned char>(working_space_[bucket_size_*i]);
      size_t offset = bucket_size_*i + 1;
      // Clear vector for repeated use.
      bucket_keys.clear();
      for(int j = 0; j< key_num; j++) {
        if(j < bucket_size_-1)
          bucket_keys.push_back(static_cast<unsigned char>(working_space_[offset+j]) + (i<<8));
        else
          bucket_keys.push_back(overflowed[overflowed_idx++]);
      }
      std::sort(bucket_keys.begin(), bucket_keys.end());
      for(std::vector<size_t>::iterator it = bucket_keys.begin(); it != bucket_keys.end(); ++it) {
        size_t distance = *it-last_one;
        last_one = *it;
        // Encoding the distance to variable length plus encode.
        if(distance <= 254) {
          space_->push_back(static_cast<unsigned char>(distance));
        } else {
          space_->push_back(static_cast<unsigned char>(255));
          distance -= 254;
          unsigned char b = static_cast<unsigned char>(distance % 128);
          while (distance / 128 > 0) {
            // Set continue bit
            b |= 1 << 7;
            space_->push_back(b);
            distance /= 128;
            b = static_cast<unsigned char>(distance % 128);
          }
          space_->push_back(b);
        }
      }
    }
    return space_->size();
  }

  static bool Test(uint32_t bit, size_t key_bits, const Slice& input) {
    size_t index = 0;
    for(size_t i = 0; i < input.size(); i++) {
      size_t runLen = 0;
      size_t bytes = 0;
      if(static_cast<unsigned char>(input[i])<=254) {
        runLen += static_cast<unsigned char>(input[i]);
      } else {
        runLen += 254;
        i++;
        while((input[i] & (1<<7)) !=0) {
          runLen += static_cast<size_t>(input[i] & ((1<<7)-1)) << (bytes*7);
          i++;
          bytes++;
        }
        runLen += static_cast<size_t>(input[i]) << (bytes*7);
      }
      if(index + runLen == bit)
        return true;
      else if (index + runLen > bit)
        return false;
      else
        index += runLen;
    }
    return false;
  }

};

template <typename T>
int BitmapBlock<T>::chunk_type() {
  return static_cast<int>(ChunkType::kBmpChunk);
}

template <typename T>
BitmapBlock<T>::BitmapBlock(const DirOptions& options, size_t bytes_to_reserve)
    : key_bits_(options.bm_key_bits) {
  // Reserve extra 2 bytes for storing key_bits and the compression type
  if (bytes_to_reserve != 0) {
    space_.reserve(bytes_to_reserve + 2);
  }
  fmt_ = new T(options, &space_);
  finished_ = true;  // Pending further initialization
  mask_ = ~static_cast<uint32_t>(0) << key_bits_;
  mask_ = ~mask_;
}

template <typename T>
void BitmapBlock<T>::Reset(uint32_t num_keys) {
  assert(fmt_ != NULL);
  fmt_->Reset(num_keys);
  finished_ = false;
}

// To convert a key into an int, the first 4 bytes of the key is interpreted as
// the little-endian representation of a 32-bit int. As illustrated below,
// the conversion may be seen as using the "first" 32 bits of the byte array to
// construct an int.
//
// [07.06.05.04.03.02.01.00]  [15.14.13.12.11.10.09.08] [...] [...]
//  <------------ byte 0 ->    <------------ byte 1 ->
//
static uint32_t BitmapIndex(const Slice& key) {
  char tmp[4];
  memset(tmp, 0, sizeof(tmp));
  memcpy(tmp, key.data(), std::min(key.size(), sizeof(tmp)));
  return DecodeFixed32(tmp);
}

// Insert a key (1-4 bytes) into the bitmap filter. If the key has more than 4
// bytes, the rest bytes are ignored. If a key has less than 4 bytes, it will be
// zero-padded to 4 bytes.
// Inserting a key is achieved by first converting the key into an int, i,
// and then setting the i-th bit of the bitmap to "1".
template <typename T>
void BitmapBlock<T>::AddKey(const Slice& key) {
  assert(!finished_);  // Finish() has not been called
  uint32_t i = BitmapIndex(key);
  i &= mask_;
  assert(fmt_ != NULL);
  fmt_->Set(i);
}

template <typename T>
Slice BitmapBlock<T>::Finish() {
  assert(fmt_ != NULL);
  finished_ = true;
  size_t len = fmt_->Finish();
  space_.resize(len);
  // Remember the size of the domain space
  space_.push_back(static_cast<char>(key_bits_));
  // Remember the compression type
  if(typeid(T)== typeid(UncompressedFormat)) {
    space_.push_back(static_cast<char>(0));
  } else if (typeid(T)== typeid(VarintFormat)) {
    space_.push_back(static_cast<char>(1));
  } else if (typeid(T)== typeid(VarintPlusFormat)) {
    space_.push_back(static_cast<char>(2));
  }
  return space_;
}

template <typename T>
BitmapBlock<T>::~BitmapBlock() {
  delete fmt_;
}

template class BitmapBlock<UncompressedFormat>;

template class BitmapBlock<VarintFormat>;

template class BitmapBlock<VarintPlusFormat>;

// Return true if the target key matches a given bitmap filter. Unlike bloom
// filters, bitmap filters are designed with no false positives.
bool BitmapKeyMustMatch(const Slice& key, const Slice& input) {
  const size_t len = input.size();
  if (len < 2) {
    return false;  // Empty bitmap
  }

  Slice bitmap =
      input;  // Net bitmap representation (maybe in a compressed form)
  bitmap.remove_suffix(2);
  uint32_t i = BitmapIndex(key);

  // Recover the domain space
  const size_t key_bits = static_cast<unsigned char>(input[input.size() - 2]);

  size_t bits = 1u << key_bits;
  if (i >= bits) {
    return false;  // Out of bound
  }

  const int compression = input[input.size() - 1];
  if (compression == 0) {
    return UncompressedFormat::Test(i, key_bits, bitmap);
  } else if (compression == 1) {
    return VarintFormat::Test(i, key_bits, bitmap);
  } else if (compression == 2) {
    return VarintPlusFormat::Test(i, key_bits, bitmap);
  } else {
    return true;
  }
}

int EmptyFilterBlock::chunk_type() {
  return static_cast<int>(ChunkType::kUnknown);
}

EmptyFilterBlock::EmptyFilterBlock(const DirOptions& o, size_t b) {
  space_.resize(0);
#if __cplusplus >= 201103L
  space_.shrink_to_fit();  // not available before c++11
#endif
}

}  // namespace plfsio
}  // namespace pdlfs
