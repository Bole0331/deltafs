#!/bin/sh
#
# Detects OS we're compiling on and outputs a file specified by the first
# argument, which in turn gets read while processing Makefile.
#
# The output will set the following variables:
#   CC                          C Compiler path
#   CXX                         C++ Compiler path
#   PLATFORM_LDFLAGS            Linker flags
#   PLATFORM_LIBS               Libraries flags
#   PLATFORM_SHARED_EXT         Extension for shared libraries
#   PLATFORM_SHARED_LDFLAGS     Flags for building shared library
#                               This flag is embedded just before the name
#                               of the shared library without intervening spaces
#   PLATFORM_SHARED_CFLAGS      Flags for compiling objects for shared library
#   PLATFORM_CCFLAGS            C compiler flags
#   PLATFORM_CXXFLAGS           C++ compiler flags.
#
# The PLATFORM_CCFLAGS and PLATFORM_CXXFLAGS might include the following:
#
#  -DPDLFS_PLATFORM_ATOMIC_PRESENT    if <atomic> is present
#  -DPDLFS_PLATFORM_POSIX             if on POSIX-based platforms
#  -DPDLFS_WITH_MPI                   if MPI is installed
#  -DPDLFS_OS_*                       where "*" is the OS name
#
#  -DSNAPPY                     if the Snappy library is present
#  -DGLOG                       if the Google logging library is present
#  -DGFLAGS                     if the Google flags library is present
#  -DRADOS                      if the Ceph rados library is present
#  -DMERCURY                    if the Mercury RPC library is present
#  -DMARGO                      if the Margo Mercury suite library is present
#

OUTPUT=$1
PREFIX=$2
if test -z "$OUTPUT" || test -z "$PREFIX"; then
  echo "usage: $0 <output-filename> <directory_prefix>" >&2
  exit 1
fi

# Delete existing output, if it exists
rm -f $OUTPUT
touch $OUTPUT

if test -z "$CC"; then CC="gcc"; fi
if test -z "$CXX"; then CXX="g++"; fi
if test -z "$MPICC"; then MPICC="mpicc"; fi
if test -z "$MPICXX"; then MPICXX="mpicxx"; fi
if test -z "$TMPDIR"; then
    TMPDIR=/tmp
fi

# Detect OS
if test -z "$TARGET_OS"; then
    TARGET_OS=`uname -s`
fi

COMMON_FLAGS=
CROSS_COMPILE=
PLATFORM_CCFLAGS=
PLATFORM_CXXFLAGS=
PLATFORM_LDFLAGS=
PLATFORM_LIBS=
PLATFORM_SHARED_EXT="so"
PLATFORM_SHARED_LDFLAGS="-shared -Wl,-soname -Wl,"
PLATFORM_SHARED_CFLAGS="-fPIC"

MEMCMP_FLAG=
case "$CXX" in
    g++*)
        # Use libc's memcmp instead of GCC's memcmp.  This results in ~40%
        # performance improvement on readrandom under gcc 4.4.3 on Linux/x86.
        MEMCMP_FLAG="-fno-builtin-memcmp"
        ;;
    *)
        ;;
esac

case "$TARGET_OS" in
    CYGWIN_*)
        # XXX: DEFINES LINUX TOO
        PLATFORM=OS_LINUX
        COMMON_FLAGS="$MEMCMP_FLAG -lpthread -DPDLFS_OS_LINUX -DPDLFS_OS_CYGWIN"
        PLATFORM_LDFLAGS="-lpthread"
        ;;
    Darwin)
        PLATFORM=OS_MACOSX
        COMMON_FLAGS="$MEMCMP_FLAG -DPDLFS_OS_MACOSX"
        PLATFORM_SHARED_EXT=dylib
        [ -z "$INSTALL_PATH" ] && INSTALL_PATH=`pwd`
        PLATFORM_SHARED_LDFLAGS="-dynamiclib -install_name $INSTALL_PATH/"
        ;;
    Linux)
        PLATFORM=OS_LINUX
        COMMON_FLAGS="$MEMCMP_FLAG -pthread -DPDLFS_OS_LINUX"
        PLATFORM_LDFLAGS="-pthread"
        ;;
    SunOS)
        PLATFORM=OS_SOLARIS
        COMMON_FLAGS="$MEMCMP_FLAG -D_REENTRANT -DPDLFS_OS_SOLARIS"
        PLATFORM_LIBS="-lpthread -lrt"
        ;;
    FreeBSD)
        PLATFORM=OS_FREEBSD
        COMMON_FLAGS="$MEMCMP_FLAG -D_REENTRANT -DPDLFS_OS_FREEBSD"
        PLATFORM_LIBS="-lpthread"
        ;;
    NetBSD)
        PLATFORM=OS_NETBSD
        COMMON_FLAGS="$MEMCMP_FLAG -D_REENTRANT -DPDLFS_OS_NETBSD"
        PLATFORM_LIBS="-lpthread -lgcc_s"
        ;;
    OpenBSD)
        PLATFORM=OS_OPENBSD
        COMMON_FLAGS="$MEMCMP_FLAG -D_REENTRANT -DPDLFS_OS_OPENBSD"
        PLATFORM_LDFLAGS="-pthread"
        ;;
    HP-UX)
        PLATFORM=OS_HPUX
        COMMON_FLAGS="$MEMCMP_FLAG -D_REENTRANT -DPDLFS_OS_HPUX"
        PLATFORM_LDFLAGS="-pthread"
        PLATFORM_SHARED_LDFLAGS="-shared -Wl,+h -Wl,"
        ;;
    *)
        echo "Unknown platform!" >&2
        exit 1
esac

COMMON_FLAGS="-pedantic -Wall -Wno-long-long -Wno-sign-compare -DDELTAFS $COMMON_FLAGS"

COMMON_FLAGS="$COMMON_FLAGS -DPDLFS_PLATFORM_POSIX"
COMMON_FLAGS="$COMMON_FLAGS -DPDLFS_MAKEFILE"

# We want to make a list of all source files within the project
# except for the test and benchmark files. By default, find will output a list
# of all files matching either rule, so we need to append -print to make the
# prune take effect.
PDLFS_COMMON_DIR="$PREFIX/external/pdlfs-common/src"

set -f # temporarily disable globbing so that our patterns aren't expanded
PRUNE_TEST="-name *test*.cc -prune"
LIBPDLFS_COMMON_SOURCE_FILES=`find $PDLFS_COMMON_DIR $PRUNE_TEST \
    -o -name '*.cc' -print | sort | sed "s,^$PREFIX/,," | tr "\n" " "`
LIBDELTAFS_SOURCE_FILES=`find $PREFIX/src/libdeltafs $PRUNE_TEST \
    -o -name '*.cc' -print | sort | sed "s,^$PREFIX/,," | tr "\n" " "`

set +f # re-enable globbing

echo "LIBPDLFS_COMMON_SOURCES=`echo $LIBPDLFS_COMMON_SOURCE_FILES`" >> $OUTPUT
echo "LIBPDLFS_MODULE_RADOS_SOURCES=`echo $LIBPDLFS_MODULE_RADOS_SOURCE_FILES`" >> $OUTPUT
echo "LIBDELTAFS_SOURCES=`echo $LIBDELTAFS_SOURCE_FILES`" >> $OUTPUT

if [ "$CROSS_COMPILE" = "true" ]; then
    # Cross-compiling; do not try any compilation tests.
    true
else
    CXXOUTPUT="${TMPDIR}/deltafs_build_detect_platform.$$"

    # Add -std=c++11 or -std=c++0x if either one works
    $CXX $CXXFLAGS -std=c++11 -x c++ - -o $CXXOUTPUT 2>/dev/null  <<EOF
      int main() {}
EOF
    if [ "$?" = 0 ]; then
        PLATFORM_CXXFLAGS="-std=c++11"
    else
        $CXX $CXXFLAGS -std=c++0x -x c++ - -o $CXXOUTPUT 2>/dev/null  <<EOF
          int main() {}
EOF
        if [ "$?" = 0 ]; then
            PLATFORM_CXXFLAGS="-std=c++0x"
        fi
    fi

    # Test whether glog is installed
    # https://github.com/google/glog/
    $CXX $CXXFLAGS -x c++ - -o $CXXOUTPUT 2>/dev/null  <<EOF
      #include <glog/logging.h>
      int main() {}
EOF
    if [ "$?" = 0 ]; then
        COMMON_FLAGS="$COMMON_FLAGS -DGLOG"
        PLATFORM_LIBS="$PLATFORM_LIBS -lglog"
    fi

    # Test whether gflags is installed
    # https://github.com/gflags/gflags/
    $CXX $CXXFLAGS -x c++ - -o $CXXOUTPUT 2>/dev/null  <<EOF
      #include <gflags/gflags.h>
      int main() {}
EOF
    if [ "$?" = 0 ]; then
        COMMON_FLAGS="$COMMON_FLAGS -DGFLAGS"
        PLATFORM_LIBS="$PLATFORM_LIBS -lgflags"
    fi

    # Test whether rados is installed
    # https://github.com/ceph/ceph/
    $CXX $CXXFLAGS -x c++ - -o $CXXOUTPUT 2>/dev/null  <<EOF
      #include <rados/librados.h>
      int main() {}
EOF
    if [ "$?" = 0 ]; then
        COMMON_FLAGS="$COMMON_FLAGS -DRADOS"
        PLATFORM_LIBS="$PLATFORM_LIBS -lrados"
    fi

    # Test whether margo mercury suite is installed
    $CXX $CXXFLAGS -x c++ - -o $CXXOUTPUT 2>/dev/null  <<EOF
      #include <margo.h>
      int main() {}
EOF
    if [ "$?" = 0 ]; then
        COMMON_FLAGS="$COMMON_FLAGS -DMARGO"
        PLATFORM_LIBS="$PLATFORM_LIBS -lmargo -labt-snoozer -labt"
    fi

    # Test whether mercury rpc is installed
    $CXX $CXXFLAGS -x c++ - -o $CXXOUTPUT 2>/dev/null  <<EOF
      #include <mercury.h>
      int main() {}
EOF
    if [ "$?" = 0 ]; then
        COMMON_FLAGS="$COMMON_FLAGS -DMERCURY"
        PLATFORM_LIBS="$PLATFORM_LIBS -lmercury -lna"
    fi

    # Test whether snappy library is installed
    # http://code.google.com/p/snappy/
    $CXX $CXXFLAGS -x c++ - -o $CXXOUTPUT 2>/dev/null  <<EOF
      #include <snappy.h>
      int main() {}
EOF
    if [ "$?" = 0 ]; then
        COMMON_FLAGS="$COMMON_FLAGS -DSNAPPY"
        PLATFORM_LIBS="$PLATFORM_LIBS -lsnappy"
    fi

    # Test whether tcmalloc is available
    $CXX $CXXFLAGS -x c++ - -o $CXXOUTPUT -ltcmalloc 2>/dev/null  <<EOF
      int main() {}
EOF
    if [ "$?" = 0 ]; then
        PLATFORM_LIBS="$PLATFORM_LIBS -ltcmalloc"
    fi

    # If MPI has been installed, build deltafs with it
    $MPICXX $CXXFLAGS -x c++ - -o $CXXOUTPUT 2>/dev/null <<EOF
      #include <mpi.h>
      int main() {}
EOF
    if [ "$?" = 0 ]; then
        COMMON_FLAGS="$COMMON_FLAGS -DPDLFS_WITH_MPI"
        CC="$MPICC"
        CXX="$MPICXX"
    fi

    rm -f $CXXOUTPUT 2>/dev/null
fi

PLATFORM_CCFLAGS=`for f in $PLATFORM_CCFLAGS $COMMON_FLAGS; do echo $f; done | sort`
PLATFORM_CXXFLAGS=`for f in $PLATFORM_CXXFLAGS $COMMON_FLAGS; do echo $f; done | sort`

echo "CC=$CC" >> $OUTPUT
echo "CXX=$CXX" >> $OUTPUT
echo "PLATFORM=$PLATFORM" >> $OUTPUT
echo "PLATFORM_LDFLAGS=`echo $PLATFORM_LDFLAGS`" >> $OUTPUT
echo "PLATFORM_LIBS=`echo $PLATFORM_LIBS`" >> $OUTPUT
echo "PLATFORM_CCFLAGS=`echo $PLATFORM_CCFLAGS`" >> $OUTPUT
echo "PLATFORM_CXXFLAGS=`echo $PLATFORM_CXXFLAGS`" >> $OUTPUT
echo "PLATFORM_SHARED_CFLAGS=`echo $PLATFORM_SHARED_CFLAGS`" >> $OUTPUT
echo "PLATFORM_SHARED_EXT=`echo $PLATFORM_SHARED_EXT`" >> $OUTPUT
echo "PLATFORM_SHARED_LDFLAGS=`echo $PLATFORM_SHARED_LDFLAGS`" >> $OUTPUT

exit 0
